---
## Tasks for patching OSB

##=====================================================
## Pre patch/rollback actions
##=====================================================

- name: check if enough disk space is available
  assert:
    that:
      - item.size_available > mounts_used[item.mount]
    msg: "Insufficient disk space available on {{ item.mount }}"
  when: item.mount in mounts_used
  with_items:
    - "{{ ansible_mounts }}"

- name: get osb patches applied
  command: "{{ osb_home }}/OPatch/opatch lsinv -oh {{ osb_home }}"
  register: osb_applied_pre
  changed_when: false
  check_mode: no

- name: print osb patches applied
  debug:
    var: osb_applied_pre.stdout_lines

- name: create local lists dir if not present
  local_action:
    module: file
    state: directory
    mode: 0777
    path: "{{ lists_dir }}"
  become: no

- name: write osb patches applied to local lists file
  local_action:
    module: blockinfile
    block: "{{ osb_applied_pre.stdout_lines }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - OSB PATCH(ES) -->"
    create: yes
    mode: 0666
    path: "{{ lists_dir }}/{{ inventory_hostname }}"
  become: no

- name: check if processes are absent (before patching)
  command: pgrep -f "Dweblogic"
  register: ps_check
  changed_when: false
  failed_when: ps_check.rc == 0


##=====================================================
## Rollback actions
##=====================================================

- block:

  - name: check if osb_rollback_patch is provided
    assert:
      that:
        - osb_rollback_patch is defined
      msg:
        - "osb patch(es) to remove is not defined"
        - "please provide osb_rollback_patch, f.e. --extra-vars osb_rollback_patch=['28481043','<optional_patch2>']"

  - name: print osb patch(es) to be removed (csv format)
    debug:
      msg: "osb patch(es) to remove: {{ osb_rollback_patch }}"

  - name: rollback osb patch(es)
    command: "{{ osb_home }}/OPatch/opatch rollback -id {{ item }} -oh {{ osb_home }} -silent"
    register: rollback_result
    changed_when: "'Patch not present in the Oracle Home' not in rollback_result.stderr"
    failed_when: rollback_result.rc != 0 and ("Patch not present in the Oracle Home" not in rollback_result.stderr)
    with_items:
      - "{{ osb_rollback_patch }}"

  when: rollback_osb


##=====================================================
## Patch OSB actions
##=====================================================

- block:

  - name: check if osb_patch is provided
    assert:
      that:
        - osb_patch is defined
      msg:
        - "osb patch(es) to apply is not defined"
        - "please provide osb_patch, f.e. --extra-vars osb_patch=['28481043','<optional_patch2>']"

  - name: print osb patch(es) to be applied (csv format)
    debug:
      msg: "osb patch(es) to apply: {{ osb_patch }}"

  - name: fetch osb patch zipfile(s) from artifactory
    include_role:
      name: common_prep_repo
    vars:
      repo_dir: osb
      artifacts: "{{ osb_zipfiles }}"

  - name: get patch zipfile(s) in repo
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.zip*"
    register: osb_patch_zipfiles

  - name: ensure patch_tmp_dir exists
    file:
      path: "{{ patch_tmp_dir }}"
      state: directory

  - name: extract patch zipfile(s) to tmp dir
    unarchive:
      src: "{{ item.path }}"
      dest: "{{ patch_tmp_dir }}"
      list_files: yes
      remote_src: yes
    with_items:
      - "{{ osb_patch_zipfiles.files }}"

  - name: backup osb dir prior to patching
    archive:
      path: "{{ osb_home }}"
      dest: "{{ mw_home }}/Oracle_OSB1_bkp.tar.gz"

  - name: apply osb patch(es)
    command: "{{ osb_home }}/OPatch/opatch apply -oh {{ osb_home }} -silent -force"
    args:
      chdir: "{{ patch_tmp_dir }}/{{ item }}"
    register: patch_result
    with_items:
      - "{{ osb_patch }}"
    changed_when: "'following patch(es) are already installed' not in patch_result.stdout"

  - name: get osb patch zipfile(s) in temp dir
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.zip*"
    register: zipfiles_to_delete

  - name: clean up osb patch zipfile(s) in temp dir
    file:
      path: "{{ item.path }}"
      state: absent
    with_items:
      - "{{ zipfiles_to_delete.files }}"
    become: no

  - name: clean up extracted patch files and dirs in temp dir
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "{{ patch_tmp_dir }}"
      - "{{ repo_install_dir }}"

  when: (not rollback_osb or rollback_osb_to_previous) and not ansible_check_mode


##=====================================================
## Post patch/rollback actions
##=====================================================
 
- name: get osb patches applied
  command: "{{ osb_home }}/OPatch/opatch lsinv -oh {{ osb_home }}"
  register: osb_applied_post
  changed_when: false
  check_mode: no

- name: print osb patches applied
  debug:
    var: osb_applied_post.stdout_lines

- name: write osb patches applied to local lists file
  local_action:
    module: blockinfile
    block: "{{ osb_applied_post.stdout_lines }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - OSB PATCH(ES) -->"
    create: yes
    mode: 0666
    path: "{{ lists_dir }}/{{ inventory_hostname }}"
  become: no
