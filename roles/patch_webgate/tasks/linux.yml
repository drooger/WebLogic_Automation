---
## Tasks for patching webgate


##=====================================================
## Install java for opatch
##=====================================================

- block:

  - name: Gather facts as root
    setup:
      gather_subset:
        - 'all'

  - name: add local user for patching
    user:
      name: "{{ privileged_user_webgate }}"
      group: "{{ privileged_group_webgate }}"
      shell: /bin/bash
      system: yes
    check_mode: no

  - name: add o+rx access for oam dir 
    file:
      path: "{{ webgate_base }}"
      mode: 0755

  - name: get java version
    command: "{{ java_exec }} -version"
    register: java_pre
    changed_when: false
    ignore_errors: true
    check_mode: no

  become_user: "root"

- name: check if enough disk space is available
  assert:
    that:
      - item.size_available > mounts_used[item.mount]
    msg: "Insufficient disk space available on {{ item.mount }}"
  when: item.mount in mounts_used
  with_items:
    - "{{ ansible_mounts }}"
  become: no
  
- block:

  - name: create dir for temporary java installation
    file:
      path: "{{ java_base }}"
      state: directory
      owner: "{{ privileged_user_webgate }}"
      group: "{{ privileged_group_webgate }}"
    become_user: "root"

  - name: fetch java tarball from artifactory
    include_role:
      name: common_prep_repo
    vars:
      repo_dir: java
      artifacts: "{{ java_tarball }}"

  - name: get new java tarball
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.tar*"
    register: tarball_to_install

  - name: install new java version
    unarchive:
      src: "{{ item.path }}"
      dest: "{{ java_base }}"
      remote_src: yes
    with_items:
      - "{{ tarball_to_install.files }}"

  - name: point symlink to new java version
    file:
      path: "{{ java_base }}/jdk"
      src: "{{ java_symlink }}"
      state: link

  - name: get old java tarball
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.tar*"
    register: tarball_to_delete

  - name: clean up old java tarballs
    file:
      path: "{{ item.path }}"
      state: absent
    with_items:
      - "{{ tarball_to_delete.files }}"
    become: no

  ## Temp java install even in check mode, needed for opatch (lsinv)
  check_mode: no
  when: "java_pre.stderr_lines is not defined or java_version not in java_pre.stderr"

##=====================================================
## Pre patch/rollback actions
##=====================================================

- block:

  - name: change ownership before running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate }}"
      group: "{{ privileged_group_webgate }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  - name: get webgate patches applied
    command: "{{ webgate_home }}/OPatch/opatch lsinv -jre {{ java_base }}/jdk"
    register: webgate_applied_pre
    changed_when: false

  - name: change ownership after running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate_original }}"
      group: "{{ privileged_group_webgate_original }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  check_mode: no

- name: print webgate patches applied
  debug:
    var: webgate_applied_pre.stdout_lines

- name: create local lists dir if not present
  local_action:
    module: file
    state: directory
    mode: 0777
    path: "{{ lists_dir }}"
  become: no

- name: write webgate patches applied to local lists file
  local_action:
    module: blockinfile
    block: "{{ webgate_applied_pre.stdout_lines }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - WEBGATE PATCH(ES) -->"
    create: yes
    mode: 0666
    path: "{{ lists_dir }}/{{ inventory_hostname }}"
  become: no

- name: check if processes are absent (before patching)
  command: "pgrep -f {{ web_processname }}"
  register: ps_check
  changed_when: false
  failed_when: ps_check.rc == 0


##=====================================================
## Rollback actions
##=====================================================

- block:

  - name: check if webgate_rollback_patch is provided
    assert:
      that:
        - webgate_rollback_patch is defined
      msg:
        - "webgate patch(es) to remove is not defined"
        - "please provide webgate_rollback_patch, f.e. --extra-vars webgate_rollback_patch=['27975790','<optional_patch2>']"

  - name: print webgate patch to be removed (csv format)
    debug:
      msg: "webgate patch(es) to remove: {{ webgate_rollback_patch }}"

  - name: change ownership before running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate }}"
      group: "{{ privileged_group_webgate }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  - name: rollback webgate patch
    command: "{{ webgate_home }}/OPatch/opatch rollback -id {{ item }} -jre {{ java_base }}/jdk -silent"
    register: rollback_result
    changed_when: "'Patch not present in the Oracle Home' not in rollback_result.stderr"
    failed_when: rollback_result.rc != 0 and ("Patch not present in the Oracle Home" not in rollback_result.stderr)
    with_items:
      - "{{ webgate_rollback_patch }}"

  - name: change ownership after running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate_original }}"
      group: "{{ privileged_group_webgate_original }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  when: rollback_webgate


##=====================================================
## Patch WebGate agent actions
##=====================================================

- block:

  - name: check if webgate_patch is provided
    assert:
      that:
        - webgate_patch is defined
      msg:
        - "webgate patch to install is not defined"
        - "please provide webgate_patch, f.e. --extra-vars webgate_patch=['27975790','<optional_patch2>']"

  - name: print webgate patch to be applied (csv format)
    debug:
      msg: "webgate patch(es) to apply: {{ webgate_patch }}"

  - name: fetch webgate patch zipfile(s) from artifactory
    include_role:
      name: common_prep_repo
    vars:
      repo_dir: webgate
      artifacts: "{{ webgate_zipfiles }}"

  - name: get patch zipfile(s) in repo
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.zip*"
    register: webgate_patch_zipfiles

  - name: ensure patch_tmp_dir exists
    file:
      path: "{{ patch_tmp_dir }}"
      state: directory

  - name: extract patch zipfile(s) to tmp dir
    unarchive:
      src: "{{ item.path }}"
      dest: "{{ patch_tmp_dir }}"
      list_files: yes
      remote_src: yes
    with_items:
      - "{{ webgate_patch_zipfiles.files }}"

  - name: backup webgate dir prior to patching
    archive:
      path: "{{ webgate_home }}"
      dest: "{{ webgate_base }}/webgate_bkp.tar.gz"
    become_user: root

  - name: change ownership before running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate }}"
      group: "{{ privileged_group_webgate }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  - name: apply webgate patch
    command: "{{ webgate_home }}/OPatch/opatch apply -jre {{ java_base }}/jdk -silent -force"
    args:
      chdir: "{{ patch_tmp_dir }}/{{ item }}"
    register: patch_result
    with_items:
      - "{{ webgate_patch }}"
    changed_when: "'following patch(es) are already installed' not in patch_result.stdout"

  - name: change ownership after running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate_original }}"
      group: "{{ privileged_group_webgate_original }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  - name: get webgate patch zipfile(s) in temp dir
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.zip*"
    register: zipfiles_to_delete

  - name: clean up webgate patch zipfile(s) in temp dir
    file:
      path: "{{ item.path }}"
      state: absent
    with_items:
      - "{{ zipfiles_to_delete.files }}"
    become: no

  - name: clean up extracted patch files and dirs in temp dir
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - "{{ patch_tmp_dir }}"
      - "{{ repo_install_dir }}"

  when: (not rollback_webgate or rollback_webgate_to_previous) and not ansible_check_mode


##=====================================================
## Post patch/rollback actions
##=====================================================

- block:

  - name: change ownership before running opatch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate }}"
      group: "{{ privileged_group_webgate }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"
 
  - name: get webgate patches applied
    command: "{{ webgate_home }}/OPatch/opatch lsinv -jre {{ java_base }}/jdk"
    register: webgate_applied_post
    changed_when: false

  - name: change ownership after running patch
    file:
      path: "{{ item }}"
      owner: "{{ privileged_user_webgate_original }}"
      group: "{{ privileged_group_webgate_original }}"
      recurse: yes
    with_items:
      - "{{ webgate_home }}"
      - "{{ webgate_inventory }}"
    become_user: "root"

  check_mode: no

- name: print webgate patches applied
  debug:
    var: webgate_applied_post.stdout_lines

- name: write webgate patches applied to local lists file
  local_action:
    module: blockinfile
    block: "{{ webgate_applied_post.stdout_lines }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - WEBGATE PATCH(ES) -->"
    create: yes
    mode: 0666
    path: "{{ lists_dir }}/{{ inventory_hostname }}"
  become: no
