---
## Tasks for patching wls


##=====================================================
## Pre patch/rollback actions
##=====================================================

- name: check if enough disk space is available
  assert:
    that:
      - item.size_available > mounts_used[item.mount]
    msg: "Insufficient disk space available on {{ item.mount }}"
  when: item.mount in mounts_used
  with_items:
    - "{{ ansible_mounts }}"

- name: get weblogic patches applied
  command: "./bsu.sh -view -status=applied -prod_dir={{ wls_home }}"
  args:
    chdir: "{{ bsu_dir }}"
  register: wls_applied_pre
  changed_when: false
  check_mode: no

- name: print weblogic patches applied
  debug:
    var: wls_applied_pre.stdout_lines

- name: create local lists dir if not present
  local_action:
    module: file
    state: directory
    mode: 0777
    path: "{{ lists_dir }}"
  become: no

- name: write weblogic patches applied to local lists file
  local_action:
    module: blockinfile
    block: "{{ wls_applied_pre.stdout_lines }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - WEBLOGIC PATCH(ES) -->"
    create: yes
    mode: 0666
    path: "{{ lists_dir }}/{{ inventory_hostname }}"
  become: no

- name: check if processes are absent (before patching)
  command: pgrep -f "Dweblogic"
  register: ps_check
  changed_when: false
  failed_when: ps_check.rc == 0


##=====================================================
## Patch BSU actions
##=====================================================

- name: set bsu mem args
  lineinfile:
    path: "{{ bsu_dir }}/bsu.sh"
    regexp: '^MEM_ARGS='
    line: 'MEM_ARGS="-Xms2560m -Xmx2560m -XX:+UseParallelGC"'

- name: get bsu version as prereq check for bsu update
  command: "./bsu.sh -version"
  args:
    chdir: "{{ bsu_dir }}"
  changed_when: false
  register: bsu_version
  check_mode: no

- block: 

  - name: fetch bsu patch zipfile(s) from artifactory
    include_role:
      name: common_prep_repo
    vars:
      repo_dir: bsu
      artifacts: "{{ bsu_patch }}"

  - name: extract bsu patch to bsu dir
    unarchive:
      src: "{{ repo_install_dir }}/{{ bsu_patch }}"
      dest: "{{ bsu_dir }}"
      remote_src: yes
      mode: 0744

  - name: install bsu patch prior to weblogic patching
    command: "./bsu_update.sh install"
    args:
      chdir: "{{ bsu_dir }}"

  - name: clean up bsu patch zipfile in temp dir
    file:
      path: "{{ repo_install_dir }}/{{ bsu_patch }}"
      state: absent
    become: no
  
  when: "'3.3.0.0' in bsu_version.stdout and not ansible_check_mode"


##=====================================================
## Rollback actions
##=====================================================

- block:

  - name: check if wls_rollback_patch is provided
    assert:
      that:
        - wls_rollback_patch is defined
      msg:
        - "weblogic patch(es) to remove is not defined"
        - "please provide wls_rollback_patch, f.e. --extra-vars wls_rollback_patch=['GENM','<optional_patch2>']"

  - name: print weblogic patch(es) to be removed (csv format)
    debug:
      msg: "WebLogic patch(es) to remove: {{ wls_rollback_patch }}"

  - name: rollback weblogic patch(es)
    command: "./bsu.sh -remove -patchlist={{ item }} -prod_dir={{ wls_home }}"
    args:
      chdir: "{{ bsu_dir }}"
    with_items:
      - "{{ wls_rollback_patch }}"

  when: rollback_wls


##=====================================================
## Patch WebLogic actions
##=====================================================

- block:

  - name: check if wls_patch is provided
    assert:
      that:
        - wls_patch is defined
      msg:
        - "weblogic patch(es) to install is not defined"
        - "please provide wls_patch, f.e. --extra-vars wls_patch=['GENM','<optional_patch2>']"

  - name: print weblogic patch(es) to be applied (csv format)
    debug:
      msg: "WebLogic patch(es) to apply: {{ wls_patch }}"

  - name: backup wlserver dir prior to patching
    archive:
      path: "{{ wls_home }}"
      dest: "{{ mw_home }}/wlserver_10.3_bkp.tar.gz"

  - name: backup patch-catalog prior to patching
    archive:
      path: "{{ bsu_cache_dir }}"
      dest: "{{ mw_home }}/patch-catalog_bkp.tar.gz"

  - name: fetch weblogic patch zipfile(s) from artifactory
    include_role:
      name: common_prep_repo
    vars:
      repo_dir: weblogic
      artifacts: "{{ wls_zipfiles }}"

  - name: get patch zipfile(s) in repo
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.zip*"
    register: wls_patch_zipfiles

  - name: extract patch zipfile(s) to bsu cache_dir
    unarchive:
      src: "{{ item.path }}"
      dest: "{{ bsu_cache_dir }}"
      list_files: yes
      remote_src: yes
    with_items:
      - "{{ wls_patch_zipfiles.files }}"

  - name: check if patch jarfile is in bsu cache dir
    find:
      paths: "{{ bsu_cache_dir }}"
      patterns: "{{ item }}.jar*"
    register: jarfile_present
    failed_when: jarfile_present.matched == 0
    with_items:
      - "{{ wls_patch }}"

  - name: get conflicting patch(es) currently applied
    set_fact: 
      conflict: "{{ conflict }} + [ '{{ item }}' ]"
    when: wls_applied_pre.stdout | search(item)
    with_items: 
      - "{{ conflicting_wls_patches }}"

  - name: rollback conflicting patch before applying new patch
    command: "./bsu.sh -remove -patchlist={{ item }} -prod_dir={{ wls_home }}"
    args:
      chdir: "{{ bsu_dir }}"
    when: conflict
    with_items:
      - "{{ conflict }}"

  - name: apply weblogic patch(es)
    command: "./bsu.sh -install -patchlist={{ item }} -prod_dir={{ wls_home }}"
    args:
      chdir: "{{ bsu_dir }}"
    register: patch_result
    ## ignore (OoM) errors while patching was successful
    failed_when: "'Result: Success' not in patch_result.stdout and 'Patch already installed' not in patch_result.stdout"
    with_items:
      - "{{ wls_patch }}"

  - name: get file(s) in bsu cache dir to delete
    find:
      paths: "{{ bsu_cache_dir }}"
      file_type: file
    register: files_to_delete

  - name: clean up weblogic patch file(s) 
    file:
      path: "{{ item.path }}"
      state: absent
    when: "item.path != bsu_patch_catalog"
    with_items: "{{ files_to_delete.files }}"

  - name: get weblogic patch zipfile(s) in temp dir
    find:
      paths: "{{ repo_install_dir }}"
      patterns: "*.zip*"
    register: zipfiles_to_delete

  - name: clean up weblogic patch zipfile(s) in temp dir
    file:
      path: "{{ item.path }}"
      state: absent
    with_items:
      - "{{ zipfiles_to_delete.files }}"
    become: no

  when: (not rollback_wls or rollback_wls_to_previous) and not ansible_check_mode


##=====================================================
## Post patch/rollback actions
##=====================================================
 
- name: get weblogic patches applied
  command: "./bsu.sh -view -status=applied -prod_dir={{ wls_home }}"
  args:
    chdir: "{{ bsu_dir }}"
  register: wls_applied_post
  changed_when: false
  check_mode: no

- name: print weblogic patches applied
  debug:
    var: wls_applied_post.stdout_lines

- name: write weblogic patches applied to local lists file
  local_action:
    module: blockinfile
    block: "{{ wls_applied_post.stdout_lines }}"
    marker: "<!-- {mark} ANSIBLE MANAGED BLOCK - WEBLOGIC PATCH(ES) -->"
    create: yes
    mode: 0666
    path: "{{ lists_dir }}/{{ inventory_hostname }}"
  become: no
